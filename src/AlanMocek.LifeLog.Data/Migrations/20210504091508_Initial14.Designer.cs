// <auto-generated />
using System;
using AlanMocek.LifeLog.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AlanMocek.LifeLog.Data.Migrations
{
    [DbContext(typeof(LifeLogContext))]
    [Migration("20210504091508_Initial14")]
    partial class Initial14
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("AlanMocek.LifeLog.Core.Activities.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Activities");

                    b.HasDiscriminator<string>("Type").HasValue("Activity");
                });

            modelBuilder.Entity("AlanMocek.LifeLog.Core.ActivityRecords.ActivityRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DayRecordId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("ActivityRecords");

                    b.HasDiscriminator<string>("Type").HasValue("ActivityRecord");
                });

            modelBuilder.Entity("AlanMocek.LifeLog.Core.DayRecords.DayRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DayRecords");
                });

            modelBuilder.Entity("AlanMocek.LifeLog.Core.Activities.ClockActivity", b =>
                {
                    b.HasBaseType("AlanMocek.LifeLog.Core.Activities.Activity");

                    b.HasDiscriminator().HasValue("activity_clock");
                });

            modelBuilder.Entity("AlanMocek.LifeLog.Core.Activities.OccurrenceActivity", b =>
                {
                    b.HasBaseType("AlanMocek.LifeLog.Core.Activities.Activity");

                    b.HasDiscriminator().HasValue("activity_occurrence");
                });

            modelBuilder.Entity("AlanMocek.LifeLog.Core.Activities.QuantityActivity", b =>
                {
                    b.HasBaseType("AlanMocek.LifeLog.Core.Activities.Activity");

                    b.HasDiscriminator().HasValue("activity_quantity");
                });

            modelBuilder.Entity("AlanMocek.LifeLog.Core.Activities.TimeActivity", b =>
                {
                    b.HasBaseType("AlanMocek.LifeLog.Core.Activities.Activity");

                    b.HasDiscriminator().HasValue("activity_time");
                });

            modelBuilder.Entity("AlanMocek.LifeLog.Core.ActivityRecords.ClockActivityRecord", b =>
                {
                    b.HasBaseType("AlanMocek.LifeLog.Core.ActivityRecords.ActivityRecord");

                    b.HasDiscriminator().HasValue("activity_record_clock");
                });

            modelBuilder.Entity("AlanMocek.LifeLog.Core.ActivityRecords.OccurrenceActivityRecord", b =>
                {
                    b.HasBaseType("AlanMocek.LifeLog.Core.ActivityRecords.ActivityRecord");

                    b.HasDiscriminator().HasValue("activity_record_occurrence");
                });

            modelBuilder.Entity("AlanMocek.LifeLog.Core.ActivityRecords.QuantityActivityRecord", b =>
                {
                    b.HasBaseType("AlanMocek.LifeLog.Core.ActivityRecords.ActivityRecord");

                    b.HasDiscriminator().HasValue("activity_record_quantity");
                });

            modelBuilder.Entity("AlanMocek.LifeLog.Core.ActivityRecords.TimeActivityRecord", b =>
                {
                    b.HasBaseType("AlanMocek.LifeLog.Core.ActivityRecords.ActivityRecord");

                    b.HasDiscriminator().HasValue("activity_record_time");
                });

            modelBuilder.Entity("AlanMocek.LifeLog.Core.ActivityRecords.ActivityRecord", b =>
                {
                    b.HasOne("AlanMocek.LifeLog.Core.Activities.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("AlanMocek.LifeLog.Core.ActivityRecords.ActivityRecordOrder", "Order", b1 =>
                        {
                            b1.Property<Guid>("ActivityRecordId")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Order")
                                .HasColumnType("INTEGER");

                            b1.HasKey("ActivityRecordId");

                            b1.ToTable("ActivityRecords");

                            b1.WithOwner()
                                .HasForeignKey("ActivityRecordId");
                        });

                    b.Navigation("Activity");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("AlanMocek.LifeLog.Core.ActivityRecords.ClockActivityRecord", b =>
                {
                    b.OwnsOne("AlanMocek.LifeLog.Core.ActivityRecords.Values.ClockValue", "Value", b1 =>
                        {
                            b1.Property<Guid>("ClockActivityRecordId")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Hour")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Minute")
                                .HasColumnType("INTEGER");

                            b1.HasKey("ClockActivityRecordId");

                            b1.ToTable("ActivityRecords");

                            b1.WithOwner()
                                .HasForeignKey("ClockActivityRecordId");
                        });

                    b.Navigation("Value");
                });

            modelBuilder.Entity("AlanMocek.LifeLog.Core.ActivityRecords.QuantityActivityRecord", b =>
                {
                    b.OwnsOne("AlanMocek.LifeLog.Core.ActivityRecords.Values.QuantityValue", "Value", b1 =>
                        {
                            b1.Property<Guid>("QuantityActivityRecordId")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Quantity")
                                .HasColumnType("INTEGER");

                            b1.HasKey("QuantityActivityRecordId");

                            b1.ToTable("ActivityRecords");

                            b1.WithOwner()
                                .HasForeignKey("QuantityActivityRecordId");
                        });

                    b.Navigation("Value");
                });

            modelBuilder.Entity("AlanMocek.LifeLog.Core.ActivityRecords.TimeActivityRecord", b =>
                {
                    b.OwnsOne("AlanMocek.LifeLog.Core.ActivityRecords.Values.TimeValue", "Value", b1 =>
                        {
                            b1.Property<Guid>("TimeActivityRecordId")
                                .HasColumnType("TEXT");

                            b1.Property<TimeSpan>("Time")
                                .HasColumnType("TEXT");

                            b1.HasKey("TimeActivityRecordId");

                            b1.ToTable("ActivityRecords");

                            b1.WithOwner()
                                .HasForeignKey("TimeActivityRecordId");
                        });

                    b.Navigation("Value");
                });
#pragma warning restore 612, 618
        }
    }
}
